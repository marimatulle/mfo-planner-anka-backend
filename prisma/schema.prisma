generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clients Client[] @relation("AdvisorClients")
}

enum UserRole {
  ADVISOR
  VIEWER
}

model Client {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  age           Int
  isActive      Boolean  @default(true)
  familyProfile String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  advisorId Int
  advisor   User @relation("AdvisorClients", fields: [advisorId], references: [id])

  goals       Goal[]
  wallets     Wallet[]
  events      Event[]
  simulations Simulation[]

  Insurance Insurance[]
}

model Goal {
  id          Int      @id @default(autoincrement())
  type        String
  targetValue Float
  targetDate  DateTime
  clientId    Int
  client      Client   @relation(fields: [clientId], references: [id])
}

model Wallet {
  id         Int    @id @default(autoincrement())
  assetClass String
  percentage Float
  totalValue Float
  clientId   Int
  client     Client @relation(fields: [clientId], references: [id])
}

enum Frequency {
  ONCE
  MONTHLY
  ANNUAL
}

model Event {
  id        Int       @id @default(autoincrement())
  type      String
  value     Float
  frequency Frequency @default(ONCE)
  date      DateTime? 
  clientId  Int
  client    Client    @relation(fields: [clientId], references: [id])
}

model Simulation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  data      Json
  clientId  Int
  client    Client   @relation(fields: [clientId], references: [id])
}

enum InsuranceType {
  LIFE
  DISABILITY
}

model Insurance {
  id            Int           @id @default(autoincrement())
  type          InsuranceType
  coverageValue Float
  clientId      Int
  client        Client        @relation(fields: [clientId], references: [id])
  createdAt     DateTime      @default(now())
}
